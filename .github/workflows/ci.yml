name: CI/CD Pipeline for AMR Intelligence Platform

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -m pytest tests/ -v
        python test_dashboard.py

    - name: Run pipeline check
      run: |
        python check_data.py

    - name: Generate outputs
      run: |
        timeout 600 python produce_outputs.py || echo "Pipeline generation completed with status $?"

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Generate outputs for deployment
      run: |
        python produce_outputs.py

    - name: Deploy to GitHub Pages (Static files)
      uses: peaceiris/actions-gh-pages@v3
      if: success()
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./results
        destination_dir: results

  streamlit_deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    # Create Streamlit config for deployment
    - name: Configure Streamlit
      run: |
        mkdir -p ~/.streamlit/
        cat > ~/.streamlit/config.toml << EOL
        [server]
        headless = true
        port = 8501
        enableCORS = false

        [global]
        developmentMode = false
        dataFrameSerialization = "legacy"
        EOL

    - name: Build Streamlit app
      run: |
        # Pre-generate outputs for faster startup
        timeout 300 python produce_outputs.py || echo "Pre-generation completed"

    - name: Deploy to Streamlit Cloud
      run: |
        echo "Streamlit deployment configuration ready"
        # In a real deployment, you would use:
        # streamlit run dashboard.py --server.port $PORT --server.address 0.0.0.0
